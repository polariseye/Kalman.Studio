// ------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
//     运行时版本: 15.0.0.0
//  
//     对此文件的更改可能导致不正确的行为，如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
// ------------------------------------------------------------------------------
namespace Kalman.Studio.T4Template.Asp.Net.Ebboy.View
{
    using System;
    using System.IO;
    using System.Xml;
    using System.Linq;
    using System.Text;
    using System.Data;
    using System.Data.Common;
    using System.Collections;
    using System.Collections.Generic;
    using System.Collections.Specialized;
    using Kalman;
    using Kalman.Extensions;
    using Kalman.Data;
    using Kalman.Data.SchemaObject;
    using Kalman.Data.DbSchemaProvider;
    using Kalman.Data.DbProvider;
    using Kalman.Utilities;
    using Kalman.Studio.T4TemplateEngineHost;
    
    /// <summary>
    /// Class to produce the template output
    /// </summary>
    
    #line 1 "E:\testCode\CsharpCode\Kalman.Studio\src\Kalman.Studio\T4Template\Asp.Net\Ebboy\View\Index.tt"
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "15.0.0.0")]
    public partial class Index : IndexBase
    {
#line hidden
        /// <summary>
        /// Create the template output
        /// </summary>
        public virtual string TransformText()
        {
            
            #line 21 "E:\testCode\CsharpCode\Kalman.Studio\src\Kalman.Studio\T4Template\Asp.Net\Ebboy\View\Index.tt"
 
	TableHost host = (TableHost)(Host); 
	SOTable table = host.Table;
	List<SOColumn> list = host.ColumnList;
	string nameSpace = host.GetString("NameSpace");
	string className = host.GetString("ClassName");
	if(string.IsNullOrEmpty(nameSpace))nameSpace = "Entity";
	if(string.IsNullOrEmpty(className))className = table.Name;
	string tableName  = table.Name.EndsWith("s") ?table.Name.TrimEnd('s') : table.Name.Trim();
	
	int length = tableName.Length;
	string controllerName = tableName + "Controller";
	string lowerTableName = tableName.Substring(0, 1).ToLower() + tableName.Substring(1, length - 1);
	string serviceName = "_" + lowerTableName + "Service";

            
            #line default
            #line hidden
            this.Write("@model IPagedList<");
            
            #line 36 "E:\testCode\CsharpCode\Kalman.Studio\src\Kalman.Studio\T4Template\Asp.Net\Ebboy\View\Index.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(nameSpace));
            
            #line default
            #line hidden
            this.Write(".Core.Domain.");
            
            #line 36 "E:\testCode\CsharpCode\Kalman.Studio\src\Kalman.Studio\T4Template\Asp.Net\Ebboy\View\Index.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(tableName));
            
            #line default
            #line hidden
            this.Write(@">
@{
    ViewBag.Title = ""Index"";
    Layout = ""~/Views/Shared/_LayoutSubMenu.cshtml"";
}
<div id=""content"" class=""same-hight height100 overflow-auto no-padding"">
    <!-- row -->
     <section id=""sub-menu"" class="" l custom-scroll"">
        <h4>@ViewBag.Title</h4>
        <ul class=""sub-nav-list"">
            <li class=""active"">
                <a href=""#"">@ViewBag.Title</a>
            </li>
        </ul>
    </section>
    <!-- end row -->
    <!-- widget grid -->
    <section id=""widget-grid"" class=""r custom-scroll"">
         <!-- RIBBON -->
        <div id=""ribbon"" class=""no-padding"">
            <!-- breadcrumb -->
            <ol class=""breadcrumb"">
                <li>
                    @ViewBag.Title
                </li>
            </ol>
            <!-- end breadcrumb -->
            <span class=""ribbon-button-alignment pull-right"">
            </span>
        </div>
        <!-- END RIBBON -->
        <!-- row -->
        <div class=""row"">
            <!-- NEW WIDGET START -->
            <article class=""col-xs-12 col-sm-12 col-md-12 col-lg-12"">
                <!-- Widget ID (each widget will need unique ID)-->
                <div class=""jarviswidget"" id=""wid-");
            
            #line 72 "E:\testCode\CsharpCode\Kalman.Studio\src\Kalman.Studio\T4Template\Asp.Net\Ebboy\View\Index.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(tableName));
            
            #line default
            #line hidden
            this.Write("-index\"\r\n                     data-widget-editbutton=\"false\"\r\n                   " +
                    "  data-widget-colorbutton=\"false\"\r\n                     data-widget-togglebutton" +
                    "=\"false\"\r\n                     data-widget-fullscreenbutton=\"false\"\r\n           " +
                    "          data-widget-deletebutton=\"false\">\r\n                    <!-- widget div" +
                    "-->\r\n                    <div>\r\n                        <!-- widget edit box -->" +
                    "\r\n                        <div class=\"jarviswidget-editbox\">\r\n                  " +
                    "          <!-- This area used as dropdown edit box -->\r\n                        " +
                    "    <input class=\"form-control\" type=\"text\">\r\n                        </div>\r\n  " +
                    "                      <!-- end widget edit box -->\r\n                        <!--" +
                    " widget content -->\r\n                        <div class=\"widget-body\">\r\n        " +
                    "                    <div class=\"dt-toolbar bg-color-lightgray padding-top-5\">\r\n " +
                    "                               <div class=\"col-xs-12 col-sm-12\">\r\n\r\n            " +
                    "                        <div id=\"datatable_tabletools_filter\" class=\"dataTables_" +
                    "filter\">\r\n                                        <label class=\"pull-left\">\r\n   " +
                    "                                         <span class=\"input-group-addon width-au" +
                    "to no-bg no-border\">\r\n                                                关键字：\r\n    " +
                    "                                        </span>\r\n                               " +
                    "             <input type=\"search\" class=\"form-control txt_search_key\" placeholde" +
                    "r=\"\"\r\n                                                   aria-controls=\"datatabl" +
                    "e_tabletools\">\r\n                                        </label>\r\n              " +
                    "                          <label class=\"pull-left\">\r\n                           " +
                    "                 <button class=\"btn btn-default margin-left-15 btn_search\">查询</b" +
                    "utton>\r\n                                        </label>\r\n                      " +
                    "              </div>\r\n                                </div>\r\n                  " +
                    "          </div>\r\n                            <div class=\"dt-toolbar\">\r\n        " +
                    "                        <div class=\"col-md-6\">\r\n                                " +
                    "    <a href=\'@Url.Action(\"Create\",\"");
            
            #line 107 "E:\testCode\CsharpCode\Kalman.Studio\src\Kalman.Studio\T4Template\Asp.Net\Ebboy\View\Index.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(tableName));
            
            #line default
            #line hidden
            this.Write(@""")' id=""del"" class=""btn btn-success btn-sm"" data-title=""add"">添加</a>
                                </div>
                                <div class=""col-md-6"">
                                    <div class=""dataTables_length"">
                                        <label>
                                            <select name=""dt_basic_length"" aria-controls=""dt_basic"" class=""form-control"" id=""changeSize"">
                                                <option value=""10"">10</option>
                                                <option value=""20"">20</option>
                                                <option value=""30"">30</option>
                                                <option value=""50"">50</option>
                                                <option value=""100"">100</option>
                                            </select>
                                        </label>
                                    </div>
                                </div>

                            </div>
                            <table id=""datatable_fixed_column"" class=""table table-bordered"">
                                <thead>
                                <tr>
                                    ");
            
            #line 127 "E:\testCode\CsharpCode\Kalman.Studio\src\Kalman.Studio\T4Template\Asp.Net\Ebboy\View\Index.tt"
 foreach (SOColumn c in list)
                                    { 
            
            #line default
            #line hidden
            this.Write("                                    <th>\r\n                                       " +
                    " @Html.DisplayNameFor(model => model.");
            
            #line 130 "E:\testCode\CsharpCode\Kalman.Studio\src\Kalman.Studio\T4Template\Asp.Net\Ebboy\View\Index.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(c.Name));
            
            #line default
            #line hidden
            this.Write(")\r\n                                    </th>\r\n                                   " +
                    " ");
            
            #line 132 "E:\testCode\CsharpCode\Kalman.Studio\src\Kalman.Studio\T4Template\Asp.Net\Ebboy\View\Index.tt"
 } 
            
            #line default
            #line hidden
            this.Write(@"                                    <th></th>
                                </tr>
								</thead>
                                <tbody>
                                @foreach (var item in Model)
                                {
                                    <tr>
                                        ");
            
            #line 140 "E:\testCode\CsharpCode\Kalman.Studio\src\Kalman.Studio\T4Template\Asp.Net\Ebboy\View\Index.tt"
 foreach (SOColumn c in list)
                                        { 
            
            #line default
            #line hidden
            this.Write("                                        <td>\r\n                                   " +
                    "         @Html.DisplayFor(modelItem => item.");
            
            #line 143 "E:\testCode\CsharpCode\Kalman.Studio\src\Kalman.Studio\T4Template\Asp.Net\Ebboy\View\Index.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(c.Name));
            
            #line default
            #line hidden
            this.Write(")\r\n                                        </td>\r\n                               " +
                    "         ");
            
            #line 145 "E:\testCode\CsharpCode\Kalman.Studio\src\Kalman.Studio\T4Template\Asp.Net\Ebboy\View\Index.tt"
 } 
            
            #line default
            #line hidden
            this.Write("                                        <td>\r\n                                   " +
                    "         @Html.ActionLink(\"修改\", \"Edit\", new { id = item.Id }, new { @class = \"bt" +
                    "n btn-primary btn-xs\" })\r\n                                            @Html.Acti" +
                    "onLink(\"详细\", \"Details\", new { id = item.Id }, new { @class = \"btn btn-info btn-x" +
                    "s\" })\r\n                                            @Html.ActionLink(\"删除\", \"Delet" +
                    "e\", new { id = item.Id }, new { @class = \"btn btn-danger btn-xs\" })\r\n           " +
                    "                             </td>\r\n                                    </tr>\r\n " +
                    "                               }\r\n                                 </tbody>\r\n   " +
                    "                         </table>\r\n                            <div class=\"dt-to" +
                    "olbar-footer\">\r\n                                    <div class=\"col-xs-12 col-sm" +
                    "-3\">\r\n                                        <div class=\"dataTables_info\" id=\"d" +
                    "t_basic_info\" role=\"status\" aria-live=\"polite\">第 <span class=\"txt-color-darken\">" +
                    "@Model.CurrentPageIndex</span> /<span class=\"txt-color-darken\">@Model.TotalPageC" +
                    "ount</span>页，共<span class=\"text-primary\">@Model.TotalItemCount</span> 条记录</div>\r" +
                    "\n                                    </div>\r\n                                   " +
                    " <div class=\"col-md-9\">\r\n                                        <div class=\"dat" +
                    "aTables_paginate paging_simple_numbers\" id=\"datatable_tabletools_paginate\">\r\n   " +
                    "                                         @Html.Pager(Model, new PagerOptions\r\n  " +
                    "                          {\r\n                                PageIndexParameterN" +
                    "ame = \"page\",\r\n                                ShowGoButton = false\r\n           " +
                    "                 },\r\n                                                 new { @id " +
                    "= \"bootstrappager\", @class = \"pagination pagination-sm\" })\r\n                    " +
                    "                    </div>\r\n                                    </div>\r\n\r\n\r\n    " +
                    "                            </div>\r\n                        </div>\r\n            " +
                    "            <!-- end widget content -->\r\n                    </div>\r\n           " +
                    "         <!-- end widget div -->\r\n                </div>\r\n                <!-- e" +
                    "nd widget -->\r\n            </article>\r\n            <!-- WIDGET END -->\r\n        " +
                    "</div>\r\n        <!-- end row -->\r\n        <!-- row -->\r\n        <div class=\"row\"" +
                    ">\r\n            <!-- a blank row to get started -->\r\n            <div class=\"col-" +
                    "sm-12\">\r\n                <!-- your contents here -->\r\n            </div>\r\n      " +
                    "  </div>\r\n        <!-- end row -->\r\n    </section>\r\n    <!-- end widget grid -->" +
                    "\r\n</div>\r\n@section scripts{\r\n   @Scripts.Render(\"~/scripts/filter-datatables\")\r\n" +
                    "}");
            return this.GenerationEnvironment.ToString();
        }
        private global::Microsoft.VisualStudio.TextTemplating.ITextTemplatingEngineHost hostValue;
        /// <summary>
        /// The current host for the text templating engine
        /// </summary>
        public virtual global::Microsoft.VisualStudio.TextTemplating.ITextTemplatingEngineHost Host
        {
            get
            {
                return this.hostValue;
            }
            set
            {
                this.hostValue = value;
            }
        }
    }
    
    #line default
    #line hidden
    #region Base class
    /// <summary>
    /// Base class for this transformation
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "15.0.0.0")]
    public class IndexBase
    {
        #region Fields
        private global::System.Text.StringBuilder generationEnvironmentField;
        private global::System.CodeDom.Compiler.CompilerErrorCollection errorsField;
        private global::System.Collections.Generic.List<int> indentLengthsField;
        private string currentIndentField = "";
        private bool endsWithNewline;
        private global::System.Collections.Generic.IDictionary<string, object> sessionField;
        #endregion
        #region Properties
        /// <summary>
        /// The string builder that generation-time code is using to assemble generated output
        /// </summary>
        protected System.Text.StringBuilder GenerationEnvironment
        {
            get
            {
                if ((this.generationEnvironmentField == null))
                {
                    this.generationEnvironmentField = new global::System.Text.StringBuilder();
                }
                return this.generationEnvironmentField;
            }
            set
            {
                this.generationEnvironmentField = value;
            }
        }
        /// <summary>
        /// The error collection for the generation process
        /// </summary>
        public System.CodeDom.Compiler.CompilerErrorCollection Errors
        {
            get
            {
                if ((this.errorsField == null))
                {
                    this.errorsField = new global::System.CodeDom.Compiler.CompilerErrorCollection();
                }
                return this.errorsField;
            }
        }
        /// <summary>
        /// A list of the lengths of each indent that was added with PushIndent
        /// </summary>
        private System.Collections.Generic.List<int> indentLengths
        {
            get
            {
                if ((this.indentLengthsField == null))
                {
                    this.indentLengthsField = new global::System.Collections.Generic.List<int>();
                }
                return this.indentLengthsField;
            }
        }
        /// <summary>
        /// Gets the current indent we use when adding lines to the output
        /// </summary>
        public string CurrentIndent
        {
            get
            {
                return this.currentIndentField;
            }
        }
        /// <summary>
        /// Current transformation session
        /// </summary>
        public virtual global::System.Collections.Generic.IDictionary<string, object> Session
        {
            get
            {
                return this.sessionField;
            }
            set
            {
                this.sessionField = value;
            }
        }
        #endregion
        #region Transform-time helpers
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void Write(string textToAppend)
        {
            if (string.IsNullOrEmpty(textToAppend))
            {
                return;
            }
            // If we're starting off, or if the previous text ended with a newline,
            // we have to append the current indent first.
            if (((this.GenerationEnvironment.Length == 0) 
                        || this.endsWithNewline))
            {
                this.GenerationEnvironment.Append(this.currentIndentField);
                this.endsWithNewline = false;
            }
            // Check if the current text ends with a newline
            if (textToAppend.EndsWith(global::System.Environment.NewLine, global::System.StringComparison.CurrentCulture))
            {
                this.endsWithNewline = true;
            }
            // This is an optimization. If the current indent is "", then we don't have to do any
            // of the more complex stuff further down.
            if ((this.currentIndentField.Length == 0))
            {
                this.GenerationEnvironment.Append(textToAppend);
                return;
            }
            // Everywhere there is a newline in the text, add an indent after it
            textToAppend = textToAppend.Replace(global::System.Environment.NewLine, (global::System.Environment.NewLine + this.currentIndentField));
            // If the text ends with a newline, then we should strip off the indent added at the very end
            // because the appropriate indent will be added when the next time Write() is called
            if (this.endsWithNewline)
            {
                this.GenerationEnvironment.Append(textToAppend, 0, (textToAppend.Length - this.currentIndentField.Length));
            }
            else
            {
                this.GenerationEnvironment.Append(textToAppend);
            }
        }
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void WriteLine(string textToAppend)
        {
            this.Write(textToAppend);
            this.GenerationEnvironment.AppendLine();
            this.endsWithNewline = true;
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void Write(string format, params object[] args)
        {
            this.Write(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void WriteLine(string format, params object[] args)
        {
            this.WriteLine(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Raise an error
        /// </summary>
        public void Error(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Raise a warning
        /// </summary>
        public void Warning(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            error.IsWarning = true;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Increase the indent
        /// </summary>
        public void PushIndent(string indent)
        {
            if ((indent == null))
            {
                throw new global::System.ArgumentNullException("indent");
            }
            this.currentIndentField = (this.currentIndentField + indent);
            this.indentLengths.Add(indent.Length);
        }
        /// <summary>
        /// Remove the last indent that was added with PushIndent
        /// </summary>
        public string PopIndent()
        {
            string returnValue = "";
            if ((this.indentLengths.Count > 0))
            {
                int indentLength = this.indentLengths[(this.indentLengths.Count - 1)];
                this.indentLengths.RemoveAt((this.indentLengths.Count - 1));
                if ((indentLength > 0))
                {
                    returnValue = this.currentIndentField.Substring((this.currentIndentField.Length - indentLength));
                    this.currentIndentField = this.currentIndentField.Remove((this.currentIndentField.Length - indentLength));
                }
            }
            return returnValue;
        }
        /// <summary>
        /// Remove any indentation
        /// </summary>
        public void ClearIndent()
        {
            this.indentLengths.Clear();
            this.currentIndentField = "";
        }
        #endregion
        #region ToString Helpers
        /// <summary>
        /// Utility class to produce culture-oriented representation of an object as a string.
        /// </summary>
        public class ToStringInstanceHelper
        {
            private System.IFormatProvider formatProviderField  = global::System.Globalization.CultureInfo.InvariantCulture;
            /// <summary>
            /// Gets or sets format provider to be used by ToStringWithCulture method.
            /// </summary>
            public System.IFormatProvider FormatProvider
            {
                get
                {
                    return this.formatProviderField ;
                }
                set
                {
                    if ((value != null))
                    {
                        this.formatProviderField  = value;
                    }
                }
            }
            /// <summary>
            /// This is called from the compile/run appdomain to convert objects within an expression block to a string
            /// </summary>
            public string ToStringWithCulture(object objectToConvert)
            {
                if ((objectToConvert == null))
                {
                    throw new global::System.ArgumentNullException("objectToConvert");
                }
                System.Type t = objectToConvert.GetType();
                System.Reflection.MethodInfo method = t.GetMethod("ToString", new System.Type[] {
                            typeof(System.IFormatProvider)});
                if ((method == null))
                {
                    return objectToConvert.ToString();
                }
                else
                {
                    return ((string)(method.Invoke(objectToConvert, new object[] {
                                this.formatProviderField })));
                }
            }
        }
        private ToStringInstanceHelper toStringHelperField = new ToStringInstanceHelper();
        /// <summary>
        /// Helper to produce culture-oriented representation of an object as a string
        /// </summary>
        public ToStringInstanceHelper ToStringHelper
        {
            get
            {
                return this.toStringHelperField;
            }
        }
        #endregion
    }
    #endregion
}
